#Шагаев Андрей ИУ7-14Б
#Программа для решения квадратного уравнения (3 лабораторная работа)
#Написать программу, которая по введенным целочисленным
#координатам трех точек на плоскости вычисляет длины сторон
#образованного треугольника и длину высоты, проведенной из наименьшего угла.
#Определить, является ли треугольник прямоугольным.
#Далее вводятся координаты точки. Определить, находится ли точка
#внутри треугольника. Если да, то найти расстояние от точки до
#наиболее удаленной стороны треугольника или ее продолжения.

from math import sqrt

#Ввод координат точек вершин треугольника
xa,ya = map(int,input("Введите координаты первой точки (через пробел): ").split())
xb,yb = map(int,input("Введите координаты второй точки (через пробел): ").split())
xc,yc = map(int,input("Введите координаты третьей точки (через пробел): ").split())

#Введем абсолютную погрешность для работы с вещественными числами
epsilon = 10**-8

#Расчёт длины каждой стороны
len_ab = sqrt((xb  - xa) ** 2 + (yb - ya) ** 2)
len_bc = sqrt((xc  - xb) ** 2 + (yc - yb) ** 2)
len_ca = sqrt((xa  - xc) ** 2 + (ya - yc) ** 2)

#Проверка, получился ли треугольник
is_triangle = True
if len_ab + len_ca < len_bc or len_bc + len_ca < len_ab or len_ab + len_bc < len_ca:
    is_triangle = False

#Если не треугольник
if not is_triangle:
    print("Точки с введёнными координатами образуют не  треугольник, а прямую ")

#Если всё-таки не треугольник
if is_triangle:
    #Напротив наименьшей стороны лежит наименьший угол
    smallest = min(len_ab,len_bc,len_ca)
    #Найдем площадь треугольника по формуле герона
    per = len_bc + len_ca + len_ab
    # p - полупериметр
    p= per / 2
    s_abc = sqrt(p *(p - len_ab) * (p - len_ca) * (p - len_bc))
    #Т. к. высота проведена из наименьшего угла, значит она падает на наименьшую сторону
    h_from_smallest = 2 * s_abc / smallest
    #Чтобы узнать, что треугольник прямоугольный, нам нужно знать наибольшую и меньшие стороны
    biggest = max(len_ab, len_bc, len_ca)
    middle = per - smallest - biggest

    # лаг для определения прямоугольного треугольника
    is_rectangular = False

    if abs( biggest **2 - (middle ** 2 + smallest ** 2) )< epsilon:
        is_rectangular = True

    #Вывод является ли треугольник прямоугольным, высоты из меньшего угла и длин всех сторон
    if is_rectangular:
        print("Треугольник является прямоугольным")
    else:
        print("Треугольник не является прямоугольным")
    print("Стороны треугольника равны {:<7.6g},{:<7.6g},{:<7.6g}".format(len_ab,len_bc,len_ca))
    print("Длина высоты, проведённая из наименьшего угла, равна {:<7.6g}".format(h_from_smallest))

    xd, yd = map(int,input("Введите координаты дополнительной точки через пробел :").split())

    len_ad = sqrt((xa - xd) ** 2 + (ya - yd) ** 2)
    len_bd = sqrt((xd - xb) ** 2 + (yd - yb) ** 2)
    len_cd = sqrt((xd - xc) ** 2 + (yd - yc) ** 2)

    #Находим объём треугольника ABD
    per_abd = len_ab + len_ad + len_bd
    p_abd = per_abd / 2
    s_abd = sqrt(p_abd* (p_abd - len_ad) * (p_abd - len_ab) * (p_abd - len_bd))

    # Находим объём треугольника ACD
    per_acd = len_ca + len_ad + len_cd
    p_acd = per_acd / 2
    s_acd = sqrt(p_acd * (p_acd - len_ad) * (p_acd - len_ca) * (p_acd - len_cd))

    # Находим объём треугольника BCD
    per_bcd = len_bc + len_bd + len_cd
    p_bcd = per_bcd / 2
    s_bcd = sqrt(p_bcd * (p_bcd - len_bd) * (p_bcd - len_cd) * (p_bcd - len_bc))

    #Флаг для определения нахождения точки внутри треугольника или вне
    is_in_triangle = False
    #Если сумма площадей маленьких треугольников = площади большого => точка внутри
    if ((s_abd + s_acd + s_bcd)- s_abc) < epsilon:
        is_in_triangle = True
    if not is_in_triangle:
        print("Введённая точка находится вне треугольника ")
    else:
        print(s_abd,s_bcd,s_acd,s_abc)
        #Высота в каждом маленьком треугольнике одновременно является и расстоянием до каждой стороны или ее продолжения
        h_abd = 2 * s_abd / len_ab
        h_acd = 2 * s_acd / len_ca
        h_bcd = 2 * s_bcd / len_bc
        #Определение расстояния от точки до наиболее удаленной стороны треугольника или ее продолжения
        max_h = max(h_abd,h_bcd,h_acd)

        print("Расстояние от точки до наиболее удаленной стороны треугольника или ее продолжения : {:<7.6g}".format(max_h))








