"""
Автор программы: Мазанов Влад
Группа: ИУ7-14Б
Назначение программы: по введённым целочисленным координатам трёх точек на плоскости вычисляет длины сторон
образованного треугольника и длину биссектрисы, проведенный из наибольшего угла.
"""
import math as m

# БЛОК 1
# Ввод исходных данных
xA, yA = map(int, input("Введите целочисленные координаты (x, y) вершины A треугольника через пробел: ").split())
xB, yB = map(int, input("Введите целочисленные координаты (x, y) вершины B треугольника через пробел: ").split())
xC, yC = map(int, input("Введите целочисленные координаты (x, y) вершины C треугольника через пробел: ").split())
eps = 1e-8  # абсолютная погрешность
flag = 0  # флаг

# БЛОК 2
# Вычисления
AB = m.sqrt((xB - xA) ** 2 + (yB - yA) ** 2)  # длина стороны AB
BC = m.sqrt((xC - xB) ** 2 + (yC - yB) ** 2)  # длина стороны BC
AC = m.sqrt((xC - xA) ** 2 + (yC - yA) ** 2)  # длина стороны AC

# Первый случай - не выполняется неравенство сторон треугольника
if AB + BC < AC or AB + AC < BC or BC + AC < AB:
    flag = -1
# Второй случай - вырожденный треугольник
elif abs((AB + BC) - AC) < eps or abs((AB + AC) - BC) < eps or abs((AC + BC) - AB) < eps:
    flag = 0
# Третий случай - невырожденный треугольник
else:
    flag = 1
    c = max(AB, BC, AC)  # наибольшая сторона -> напротив нее наибольший угол
    a = min(AB, BC, AC)  # наименьшая сторона
    b = AB + BC + AC - a - c  # средняя сторона
    bisector = m.sqrt(a * b * (a + b + c) * (a + b - c)) / (a + b)
    sharp_angled = a ** 2 + b ** 2 > c ** 2  # проверка на остроугольность

# БЛОК 3
# Первый вывод
if flag == -1:
    print("Введённые координаты задают отрезки AB, BC и AC, которые не удовлетворяют неравенству сторон треугольника")
elif flag == 0:
    print('Введённые координаты задают отрезки AB, BC, AC, образующие вырожденный треугольник')
else:
    print('Стороны треугольника AB, BC и AC соответственно равны {:.6g}, {:.6g} и {:.6g}'.format(AB, BC, AC))
    print('Длина биссектрисы, проведенной из наибольшего угла, равна: {:.6g}'.format(bisector))
    if sharp_angled:
        print('Треугольник является остроугольным')
    else:
        print('Треугольник не является остроугольным')

# БЛОК 4
# Снова ввод значений
if flag == 1:
    x, y = map(float, input('Введите вещественные координаты (x, y) любой точки плоскости через пробел: ').split())
    dot_in = 0  # флаг для определения лежит ли точку внутри треугольника

# БЛОК 5
# Снова вычисления
if flag == 1:
    # через косое (псевдоскалярное) произведение считаем f1, f2, f3
    # если они одного знака, значит точка внутри треугольника
    f1 = (xA - x) * (yB - yA) - (xB - xA) * (yA - y)
    f2 = (xB - x) * (yC - yB) - (xC - xB) * (yB - y)
    f3 = (xC - x) * (yA - yC) - (xA - xC) * (yC - y)
    if f1 > 0 and f2 > 0 and f3 > 0:
        dot_in = 1
    elif f1 < 0 and f2 < 0 and f3 < 0:
        dot_in = 1

    if dot_in:
        # пусть точка с координатами (x, y) - это точка M
        MA = m.sqrt((xA - x) ** 2 + (yA - y) ** 2)
        MB = m.sqrt((xB - x) ** 2 + (yB - y) ** 2)
        MC = m.sqrt((xC - x) ** 2 + (yC - y) ** 2)

        # посчитаем площадь треугольника MAB -> найдём высоту из точки M
        p = (MA + MB + AB) / 2  # полупериметр MAB
        # по площади Герона посчитаем площадь MAB
        area = m.sqrt(p * (p - MA) * (p - MB) * (p - AB))
        # считаем высоту из точки M - расстояние от M до AB
        h1 = 2 * area / AB

        # посчитаем площадь треугольника MBC -> найдём высоту из точки M
        p = (MB + MC + BC) / 2  # полупериметр MBC
        # по площади Герона посчитаем площадь MBC
        area = m.sqrt(p * (p - MB) * (p - MC) * (p - BC))
        # считаем высоту из точки M - расстояние от M до BC
        h2 = 2 * area / BC

        # посчитаем площадь треугольника MAC -> найдём высоту из точки M
        p = (MA + MC + AC) / 2  # полупериметр MAC
        # по площади Герона посчитаем площадь MAC
        area = m.sqrt(p * (p - MA) * (p - MC) * (p - AC))
        # считаем высоту из точки M - расстояние от M до AC
        h3 = 2 * area / AC

        min_h = min(h1, h2, h3)

# БЛОК 6
# Снова вывод
if dot_in:
    print('Точка находится внутри треугольника ABC')
    print('Расстояние от точки (x, y) до ближайшей стороны треугольника: {:.6g}'.format(min_h))
else:
    print('Точка находится вне треугольника ABC или на его сторонах')
